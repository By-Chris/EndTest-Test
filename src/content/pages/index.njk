---
permalink: /
title: Attribute Examples
---


<!--Location of edit items
<p>Get started:</p>
<ul>
  <li>Edit this page: <code>src/pages/index.md</code></li>
  <li>Add or edit navigation: <code>src/data/navigation.json</code></li>
  <li>Change colors and styles: <code>src/assets/styles/</code></li>
</ul>

<hr>
-->
<div>
    <ul class="breadcrumb">
        <li>Home</li>
    </ul>
</div>

<h1>Testing Section</h1>

<body>
    <p>List of locators that endTest can use</p>
    <ol>
        <li>ID</li>
        <li>Text Inside</li>
        <li>Name</li>
        <li>Class name</li>
        <li>XPath (relies on xml layout. May change. Good for unique cases, bad for the standard)</li>
        <li>CSS Selector (requires individual CSS assignemnt)</li>
        <li>Link Text (may not always be present. And may change)</li>
        <li>Partial Link Text(same as link text)</li>
    </ol>
    <br>
    <p>Attributes we can easily edit without issues</p>
    <ol>
        <li>ID</li>
        <li>Name</li>
        <li>Class name (but has some quirks)</li>
    </ol>
    <hr>

    <h1>Example Components</h1>

    <h2>Link tests</h2>

    <div class=hyperlinkTest>
        <h2>Hyperlink test</h2>
        <a href="https://stately-donut-d3cc71.netlify.app/contact/" id="hyperlink-ID" name="hyperlink-Name" class="hyperlink-Class">Link to the contact page</a>

        <ol>
            <li>id="hyperlink-ID"</li>
            <li>name="hyperlink-Name"</li>
            <li>class="hyperlink-Class"</li>
        </ol>
    </div>

    <hr>

    <h2>Button tests</h2>

    <div class=buttontesting>
        <h2>Button test</h2>
        <a href="https://stately-donut-d3cc71.netlify.app/contact/">
            <button type="button" id="button-ID" name="button-Name" class="button-Class">Button to contact page</button>
        </a>

        <ol>
            <li>id="button-ID"</li>
            <li>name="button-Name"</li>
            <li>class="button-Class"</li>
        </ol>

        <h2>Button with a dual class</h2>
        <a href="https://stately-donut-d3cc71.netlify.app/contact/">
            <button type="button" id="button2-ID" name="button2-Name" class="button-class1 button-class2">Button to contact page</button>
        </a>

        <ol>
            <li>id="button2-ID"</li>
            <li>name="button2-Name"</li>
            <li>class="button-class1 button-class2"</li>
        </ol>

        <p>Multiple classes gives some problems</p>
        <ul>
            <li>EndTest cannot handle spaces. So trying to use a class of 'button-class1 button-class2' will not work</li>
            <li>EndTest also cannot deal with multiple classes. Trying to reference 'button-class1' or 'button-class2' seperately will also fail</li>
        </ul>

        <h2>Button with nested class</h2>
        <div class="nest1">
            <a href="https://stately-donut-d3cc71.netlify.app/contact/">
                <button type="button" id="nestButton-ID" name="nestButton-Name" class="nest2">Button to contact page</button>
            </a>
        </div>
        <ol>
            <li>id="nestButton-ID"</li>
            <li>name="nestButton-Name"</li>
            <li>div class = "nest1"</li>
            <li>button class = "nest2"</li>
        </ol>
        
        <p>Nested buttons on the other hand work fine. But this example shows the limits of classes as far as EndTest is concerned</p>
        <ol>
            <li>Components can have at most 1 class</li>
            <li>Each class must be unique if it will be used to locate a component</li>
            <li>Nested classes can work as long as the other two rules are followed</li>
        </ol>
        <p>In summary, in my opinion classes are a bit too much work to use reliably. Plus it puts unneeded limits on dev options.</p>

        <div class="fancyButton">
            <a href="https://stately-donut-d3cc71.netlify.app/contact/">
                <button type="button" id="fancyButton-ID" name="fancyButton-Name">Check the hover on this</button>
            </a>
        </div>

        <ol>
            <li>id="fancyButton-ID"</li>
            <li>name="fancyButton-Name"</li>
            <li>class="fancyButton"</li>
        </ol>
        <p>Note: Unlike the last example, this button can be found on class alone without a problem. But this class is also unique to this one button. This would cause an error for if it was used in other places<br>Note2: With that done. Classes will not be pointed out any more going forward.</p>
    </div>

    <hr>

    <h2>Navigation Item Tests</h2>

    <div class="navbar">
        <a href="https://stately-donut-d3cc71.netlify.app/">Home</a>
        <a href="https://stately-donut-d3cc71.netlify.app/contact/">Contact</a>
        <div class="dropdown">
            <button class="dropbtn">Dropdown
                <i class="fa fa-caret-down"></i>
            </button>
            <div class="dropdown-content">
                <a href="https://www.google.com/">Link to Google</a>
                <a href="https://www.bing.com/">Link to Bing</a>
            </div>
        </div>
    </div>

    <hr>

    <button class="accordion">Section 1</button>
    <div class="panel">
        <p>Text for section 1</p>
    </div>

    <button class="accordion">Section 2</button>
    <div class="panel">
        <p>Text for section 1</p>
    </div>

    <hr>

    <hr>
    <div class="tab">
        <button class="tablinks" onclick="clickHandle(event, 'Cat')">Cat</button>
        <button class="tablinks" onclick="clickHandle(event, 'Bear')">Bear</button>
        <button class="tablinks" onclick="clickHandle(event, 'Dog')">Dog</button>
    </div>

    <div id="Cat" class="tabcontent">
        <h3>Meowww.</h3>
    </div>

    <div id="Bear" class="tabcontent">
        <h3>Rawrrr.</h3>
    </div>

    <div id="Dog" class="tabcontent">
        <h3>Bork Bork.</h3>
    </div>

    <script>
        function clickHandle(evt, animalName) {
            let i, tabcontent, tablinks;

            // This is to clear the previous clicked content.
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            // Set the tab to be "active".
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }

            // Display the clicked tab and set it to active.
            document.getElementById(animalName).style.display = "block";
            evt.currentTarget.className += " active";
        }

    </script>

    <p>This one may vary based on the method used to create tabs. The example I copied above uses IDs as part of the onClick event. Would work fine but is not easilay trasnfered across sites. BUT this is a good example of Name and ID being interchangable</p>
    <ol>
        <li>id="London"</li>
        <li>name="tabLondon-Name"</li>
    </ol>
    <ol>
        <li>id="Paris"</li>
        <li>name="tabParis-Name"</li>
    </ol>

    <hr>

</body>

<hr>
