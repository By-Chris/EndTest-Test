---
permalink: /
title: Attribute Examples
---


<!--Location of edit items
<p>Get started:</p>
<ul>
  <li>Edit this page: <code>src/pages/index.md</code></li>
  <li>Add or edit navigation: <code>src/data/navigation.json</code></li>
  <li>Change colors and styles: <code>src/assets/styles/</code></li>
</ul>

<hr>
-->
<div>
    <ul class="breadcrumb">
        <li>Home</li>
    </ul>
</div>

<h1>Testing Section</h1>

<body>
    <div class="Intro">
        <p>List of locators that endTest can use</p>
        <ol>
            <li>ID</li>
            <li>Text Inside</li>
            <li>Name</li>
            <li>Class name</li>
            <li>XPath</li>
            <li>CSS Selector</li>
            <li>Link Text</li>
            <li>Partial Link Text</li>
        </ol>
        <p>The most important thing for EndTest to work is that it can find the components it needs to check without any issue. As noted, the above 8 attributes/details can be used in EndTest. However I would only think that the following 3 can be used with any sort of consistency for reasons that will be explained.</p>

        <br>

        <p>Attributes we probably should not use:</p>
        <ol>
            <li>XPath</li>
            <ul>Relies on xml layout which may change overtime. This is great for unique cases where you just need to locate a item on the page, but it is bad as the standard locator method. Plus this can't easily be created ahead of time</ul>
            <li>CSS Selector</li>
            <ul>Similar to XPath this will be higly dependent on the page layout and will not always be consistent. It is also overly complex as far as quick identification goes</ul>
            <li>Link Text</li>
            <ul>Will not work on items that do not have links. Also this is another attribute that could change fairly easily. However, this is a particularly useful attribute for checking images</ul>
            <li>Partial Link Text</li>
            <ul>Poor choice for the same reasons as link text</ul>
        </ol>
        <br>

        <p>Attributes we can easily edit without issues</p>
        <ol>
            <li>ID</li>
            <li>Name</li>
            <li>Class name (but has some quirks)</li>
        </ol>

    </div>
    <hr>

    <h1>Example Components</h1>

    <h2>Link tests</h2>
    <p>Pretty straight forward for links. We can do more, but in general testing will be to locate and confirm that the link goes to the expected location.</p>

    <div class=hyperlinkTest>
        <a href="https://stately-donut-d3cc71.netlify.app/contact/" id="hyperlink-ID" name="hyperlink-Name" class="hyperlink-Class">Link to the contact page</a>

        <ol>
            <li>id="hyperlink-ID"</li>
            <li>name="hyperlink-Name"</li>
            <li>class="hyperlink-Class"</li>
        </ol>
        <p>Any one of these 3 attributes will work for EndTest. Once located. We can click the link and verify the resulting URL agains what is expected. See test results for more info</p>
        <a href="https://app.endtest.io/results?hash=VVVao1Re4AXxULLXn50sX3VOnBeATNYV" target="_blank">
            <button type="button">Click to see results</button>
        </a>
    </div>

    <hr>

    <h1>Button tests</h1>
    <h2>Basic Buttons</h2>
    <p>Buttons are not much more complicated than links as far as automated testing is concerned. The same logic of find and check applies to buttons as well. Oh, and EndTest can easily do stuff like click, hover, press keyboard keys etc. Not really going to discuss that here as the main focus is to show off how to locate and test components.</p>

    <div class=buttonTesting>
        <a href="https://stately-donut-d3cc71.netlify.app/contact/">
            <button type="button" id="button-ID" name="button-Name" class="button-Class">Button to contact page</button>
        </a>

        <ol>
            <li>id="button-ID"</li>
            <li>name="button-Name"</li>
            <li>class="button-Class"</li>
        </ol>
        <p>Just like the hyperlink example any of these 3 attributes work well for EndTest. The only extra item worth talking about at the moment is "assertions" which are basically how EndTest does checks and runs pass/fail tests. Once a button is located is is very easy to verify any number of details/actions with assertions.</p>
        <br>
        <p>For both the buttons and the hyperlink tests. The assertion is to verify that the URL contains the text "contact" after the related link is clicked/reached.</p>

        <h2>Visibility checks</h2>
        <p>The easiest example to show off how assertions work is to show an example on visiblity. This test case checks that the item is visible, hides the item, then checks if the item is visible again.</p>
        <div class="visibleTest">
            <button onclick="showButton()" type="button" id="showButton-ID" name="showButton-Name">Click this.</button>

            <a href="https://stately-donut-d3cc71.netlify.app/contact/">
                <button type="button" id="fancyButton-ID" name="fancyButton-Name" class="hiddenButton">Check the hover on this</button>
            </a>
            <script>
                function showButton() {
                    var x = document.getElementById("fancyButton-ID");
                    if (x.style.display === "none") {
                        x.style.display = "initial";
                    } else {
                        x.style.display = "none";
                    }
                }

            </script>

            <ol>
                <li>id="fancyButton-ID"</li>
                <li>name="fancyButton-Name"</li>
                <li>class="hiddenButton"</li>
            </ol>
            <p>Hopefully this has explained the basics on locators, assertions, and generally how to setup components to work well with EndTest. The next section will get into details on classes and why they are not ideal</p>
            <br>
            <p>Feel free to check the results for more info.</p>
            <a href="https://app.endtest.io/results?hash=Hkp7IbMCpbliXWAI6H711WbDls1cIXlJ" target="_blank">
                <button type="button">Click to see results</button>
            </a>

        </div>

        <hr>
        <h2>How Classes Work</h2>

        <h3>Button with a dual class</h3>

        <p>This section tries to quickly explain why classes will work, but are not really ideal. The big use of automation testing is that it can be used accross different sites with little changes. And on that point, classes cause some problems because of limitations with EndTest.</p>

        <div class="classTesting">

            <a href="www.google.com">
                <button type="button" id="button2-ID" name="button2-Name" class="button-class1 button-class2">Button to contact page</button>
            </a>

            <ol>
                <li>id="button2-ID"</li>
                <li>name="button2-Name"</li>
                <li>class="button-class1 button-class2"</li>
            </ol>

            <a href="https://stately-donut-d3cc71.netlify.app/contact/">
                <button type="button" id="button3-ID" name="button3-Name" class="button-class1 button-class2">Button to contact page</button>
            </a>
            <ol>
                <li>id="button3-ID"</li>
                <li>name="button3-Name"</li>
                <li>class="button-class1 button-class2"</li>
            </ol>

            <p>Multiple classes gives some problems</p>
            <ul>
                <li>EndTest cannot handle spaces " ". So trying to use a class of 'button-class1 button-class2' will not work. You cannot even save a test case that has spaces in it.</li>
                <li>EndTest also cannot deal with duplicate classes very well. Trying to reference 'button-class1' or 'button-class2' will work fine but EndTest searches pages top to bottom. So in the case of two different items using the same class it will always just utalize the first one found on the page.</li>
                <li>In short. If you want to use multiple classes they will need to be nested. More on this later.</li>
            </ul>

            <h3>Nested classs</h3>
            <p>All the rules from the previous example still apply for nested classes. The only extra thing to consider is that EndTest will locate exactly what a class is assigned to.</p>

            <br>
            <div class="nestA">
                <a href="https://stately-donut-d3cc71.netlify.app/contact/">
                    <button type="button" id="nestButton-ID" name="nestButton-Name" class="nestB">Button to contact page</button>
                </a>
            </div>
            <ol>
                <li>id="nestButtonB-ID"</li>
                <li>name="nestButtonB-Name"</li>
                <li>The div for this button has class = "nestA"</li>
                <li>The button itself has class = "nestB"</li>
            </ol>

            <div class="nest1">
                <p>Here is some filler text</p>
                <a href="https://stately-donut-d3cc71.netlify.app/contact/">
                    <button type="button" id="nestButton-ID" name="nestButton-Name" class="nest2">Button to contact page</button>
                </a>
            </div>
            <ol>
                <li>id="nestButton2-ID"</li>
                <li>name="nestButton2-Name"</li>
                <li>The div for this button has class = "nest1"</li>
                <li>The button itself has class = "nest2"</li>
            </ol>

            <p>A note on what was tested here. EndTest is setup to click the item with class nest1 and then click the item with class nest2. If</p>

            <br>

            <p>As mentioned above, nested classes do work since they can be refernced individually. But this example shows the limits of classes as far as EndTest is concerned</p>
            <ol>
                <li>Components should have at most 1 class or at least 1 class that can be used as a locator</li>
                <li>Each class must be unique if it will be used to locate a component. Otherwise only the first occurance of that class will be found</li>
                <li>Nested classes can work as long as the other two rules are followed and you properly choose the correct nested item</li>
            </ol>
            <p>Because of these reasons, in my opinion, classes are a bit too much work to use reliably as locators. It prevents you from assigning a single class to multiple components and enforces some odd limitations. I believe ID's and Names are a bit easier to use, but there are options.</p>
        </div>
    </div>

    <hr>

    <h2>Navigation Item Tests</h2>

    <div class="navbar">
        <a href="https://stately-donut-d3cc71.netlify.app/">Home</a>
        <a href="https://stately-donut-d3cc71.netlify.app/contact/">Contact</a>
        <div class="dropdown">
            <button class="dropbtn">Dropdown
                <i class="fa fa-caret-down"></i>
            </button>
            <div class="dropdown-content">
                <a href="https://www.google.com/">Link to Google</a>
                <a href="https://www.bing.com/">Link to Bing</a>
            </div>
        </div>
    </div>

    <hr>

    <button class="accordion">Section 1</button>
    <div class="panel">
        <p>Text for section 1</p>
    </div>

    <button class="accordion">Section 2</button>
    <div class="panel">
        <p>Text for section 1</p>
    </div>

    <hr>

    <hr>
    <div class="tab">
        <button class="tablinks" onclick="clickHandle(event, 'Cat')">Cat</button>
        <button class="tablinks" onclick="clickHandle(event, 'Bear')">Bear</button>
        <button class="tablinks" onclick="clickHandle(event, 'Dog')">Dog</button>
    </div>

    <div id="Cat" class="tabcontent">
        <h3>Meowww.</h3>
    </div>

    <div id="Bear" class="tabcontent">
        <h3>Rawrrr.</h3>
    </div>

    <div id="Dog" class="tabcontent">
        <h3>Bork Bork.</h3>
    </div>

    <script>
        function clickHandle(evt, animalName) {
            let i, tabcontent, tablinks;

            // This is to clear the previous clicked content.
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            // Set the tab to be "active".
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }

            // Display the clicked tab and set it to active.
            document.getElementById(animalName).style.display = "block";
            evt.currentTarget.className += " active";
        }

    </script>

    <p>This one may vary based on the method used to create tabs. The example I copied above uses IDs as part of the onClick event. Would work fine but is not easilay trasnfered across sites. BUT this is a good example of Name and ID being interchangable</p>
    <ol>
        <li>id="London"</li>
        <li>name="tabLondon-Name"</li>
    </ol>
    <ol>
        <li>id="Paris"</li>
        <li>name="tabParis-Name"</li>
    </ol>

    <hr>

</body>

<hr>
